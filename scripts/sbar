#!/usr/bin/env bash

source $HOME/.cache/squash/colors
SEP="  "
SEPS=" "
SPC="%{B$bg}"$SEP"%{B-}"
SEPL="%{B$red}%{F$red}--%{B-}"

# Get glyphs from siji
# Using queries is easier than c/p
glydate=$(echo -e "\ue015")
glyvol=$(echo -e "\ue050")
glyvoloff=$(echo -e "\ue052")
glybatlow=$(echo -e "\ue035")
glybat=$(echo -e "\ue037")
glybatmax=$(echo -e "\ue09e")
glywlanhigh=$(echo -e "\ue048")
glywlanlow=$(echo -e "\ue047")

# Create template for colors
grnbg="%{B$grn}%{F$fg}"
redbg="%{B$red}%{F$bg}"
blubg="%{B$blu}%{F$fg}"
ylwbg="%{B$ylw}%{F$fg}"
cynbg="%{B$cyn}%{F$fg}"
magbg="%{B$mag}%{F$fg}"
whtbg="%{B$wht}%{F$fg}"
blkbg="%{B$blk}%{F$fg}"

grnfg="%{B$bg}%{F$grn}"
redfg="%{B$bg}%{F$red}"
blufg="%{B$bg}%{F$blu}"
ylwfg="%{B$bg}%{F$ylw}"
cynfg="%{B$bg}%{F$cyn}"
magfg="%{B$bg}%{F$mag}"
whtfg="%{B$bg}%{F$wht}"
blkfg="%{B$bg}%{F$blk}"

end="%{B-}%{F-}"

content() 
{
    # Get current workspaces
    workspaces()
    {
       cur=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')

       echo "${SEPL}${redbg}${cur}${clr}${SEPL}"

    }

    # Clock
    date-time() 
    {
        clock="$(date +'%a %m/%d %I:%M')"
        label="$glydate"
        echo "${redfg}${label}${clr}${SEP}${whtfg}${clock}${clr}"
    }

    # Volume 0-100
    # Glyph will change when volume is muted
    volume() 
    {
        vol=$(amixer get Master|awk 'NR==5 {print $4}'|cut -d '%' -f1 | cut -d '[' -f2)
        
        if [[ "$vol" -ge "1" ]]; then
            vol="${grnfgg}${vol}${clr}"
            label="${cynfg}${glyvol}${clr}"
        else
            vol="${redfg}${vol}${clr}"
            label="${redfg}${glyvoloff}${clr}"
        fi

        echo "${label}${SEP}${vol}"
    }

    # Battery 0-100
    # Battery considered charged at 98%
    # Glyph changes below 20 %
    battery()
    {
        state=$(cat /sys/class/power_supply/BAT0/status)
        cap=$(cat /sys/class/power_supply/BAT0/capacity)

        if [[ "$cap" -ge "98" ]] || [[ $state == "Charging" ]]; then
            label="${glybatmax}"
        elif [[ "$cap" -ge "20" ]]; then
            label="${glybat}"
        else
            label="${glybatlow}"
        fi

        echo "${grnfg}${label}${SEP}${cap}${clr}"

    }

    # Actice window from X
    windowname()
    {
        title=$gen$SEP$(xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) WM_NAME | awk '{$1=$2="";print}' | tr -d '"' | cut -c 1-80)$SEP$clr
        echo $title
    }

    # Get SSID using iwgetid
    # If iwgetid is not found, then DISCONNECTED will be displayed
    wireless()
    {
        wifi=$(iwgetid -r)

        if [[ -z $wifi ]]; then
            wifi="DISCONNECTED"
        fi

        if [[ $wifi == "DISCONNECTED" ]]; then
            label=$bad$SEP$glywlanhigh$SEP$clr
        else
            label=$good$SEP$glywlanhigh$SEP$clr
        fi

        wifi=$gen$SEP$wifi$SEP$clr

        echo $label$wifi
    }


    # Bar contents left/right
    left="$(workspaces)"
    center="$(date-time)"
    right="$(battery)${SPC}" 
    output="$left%{c}$center%{r}$right"
    echo -n "$output"
}

content

# Formatting options
fonts="-o 1 -f -uw-ttyp0-medium-r-normal-*-14-*-*-*-*-*-*-* -o -0.5 -f -wuncon-siji-medium-r-normal--10-100-75-75-c-80-iso10646-1"
width=350
height=40
# x - y offsets
offx=20
offy=20
# Border width
brdr=0
# Border color
brdrc=${bg}
# Bar background color
bbg=${bg}
# Bar foreground color
bfg=${fg}

# Final output formatting
options="-d ${fonts} -g ${width}x${height}+${offx}+${offy} -r ${brdr} -R ${brdrc} -B ${bbg} -F ${bfg} -b"

# Main loop
#while true; do
    #echo $(content)
    #sleep .5
#done | lemonbar ${options}

while true; do
    echo $(content)
    sleep .5 
done | lemonbar ${options}
