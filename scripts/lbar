#!/usr/bin/env bash
#
# Configuration for lemonbar
#
# Inspired by dkeg :)

# Get colors and defind spacing
source $HOME/.cache/squash/colors
SEP="  "
SEPS=" "
SPC="%{B$bg}"$SEP"%{B-}"

# Get glyphs from siji
# Using queries is easier than c/p
glydate=$(echo -e "\ue015")
glyvol=$(echo -e "\ue050")
glyvoloff=$(echo -e "\ue052")
glybatlow=$(echo -e "\ue035")
glybat=$(echo -e "\ue037")
glybatmax=$(echo -e "\ue09e")
glywlanhigh=$(echo -e "\ue048")
glywlanlow=$(echo -e "\ue047")

# Create template for colors
good="%{B$grn}%{F$blk}"
warn="%{B$ylw}%{F$blk}"
bad="%{B$red}%{F$blk}"
gen="%{B$bblk}%{F$fg}"
gend="%{B$blk}%{F$fg}"
acc="%{B$acc}%{F$blk}"
clr="%{B-}%{F-}"

# Bar contents
content() 
{
    # Get current workspaces
    workspaces()
    {
       cur=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
       total=$(xprop -root _NET_NUMBER_OF_DESKTOPS | awk '{print $3}')
       total=5

       empty=$(echo -e "\ue000")

       seq=""

       for ((i=0; i<$cur && i<$((total-1)); i++)); do seq+="$gend$SEPS$i$SEPS$clr"; done
       seq+="$acc$SEPS$cur$SEPS$clr"
       for ((i=$(($cur+1)); i<$total; i++)); do seq+="$gend$SEPS$i$SEPS$clr"; done

       echo "$seq"
    }

    # Clock
    date-time() 
    {
        clock="$acc$SEP$(date +'%a %m/%d/%g %I:%M')$SEP$clr"
        echo "$clock"
    }

    # Volume 0-100
    # Glyph will change when volume is muted
    volume() 
    {
        vol=$(amixer get Master|awk 'NR==5 {print $4}'|cut -d '%' -f1 | cut -d '[' -f2)
        
        if [[ "$vol" -ge "1" ]]; then
            label=$good$SEP$glyvol$SEP$clr
        else
            label=$bad$SEP$glyvoloff$SEP$clr
        fi

        vol=$gen$SEP$vol$SEP$clr

        echo $label$vol
    }

    # Battery 0-100
    # Battery considered charged at 98%
    # Glyph changes below 20 %
    battery()
    {
        state=$(cat /sys/class/power_supply/BAT0/status)
        cap=$(cat /sys/class/power_supply/BAT0/capacity)

        if [[ "$cap" -ge "98" ]] || [[ $state == "Charging" ]]; then
            label="$good$SEP$glybatmax$SEP$clr"
        elif [[ "$cap" -ge "20" ]]; then
            label="$warn$SEP$glybat$SEP$clr"
        else
            label="$bad$SEP$glybatlow$SEP$clr"
        fi

        cap=$gen$SEP$cap$SEP$clr
        echo $label$cap
    }

    # Actice window from X
    windowname()
    {
        title=$gen$SEP$(xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) WM_NAME | awk '{$1=$2="";print}' | tr -d '"' | cut -c 1-80)$SEP$clr
        echo $title
    }

    # Get SSID using iwgetid
    # If iwgetid is not found, then DISCONNECTED will be displayed
    wireless()
    {
        wifi=$(iwgetid -r)

        if [[ -z $wifi ]]; then
            wifi="DISCONNECTED"
        fi

        if [[ $wifi == "DISCONNECTED" ]]; then
            label=$bad$SEP$glywlanhigh$SEP$clr
        else
            label=$good$SEP$glywlanhigh$SEP$clr
        fi

        wifi=$gen$SEP$wifi$SEP$clr

        echo $label$wifi
    }


    # Bar contents left/right
    left="$(workspaces)${SPC}$(windowname)"
    center=
    right="$(volume)${SPC}$(battery)${SPC}$(wireless)${SPC}$(date-time)${SCP}"

    output="$left%{c}$center%{r}$right"
    echo -n "$output"
}

content

# Formatting options
fonts="-o 1 -f -uw-ttyp0-medium-r-normal-*-14-*-*-*-*-*-*-* -o -0.5 -f -wuncon-siji-medium-r-normal--10-100-75-75-c-80-iso10646-1"
width=1910
height=20
# x - y offsets
offx=0
offy=0
# Border width
brdr=5
# Border color
brdrc=${bg}
# Bar background color
bbg=${bg}
# Bar foreground color
bfg=${fg}

# Final output formatting
options="-d ${fonts} -g ${width}x${height}+${xoff}+${yoff} -r ${brdr} -R ${brdrc} -B ${bbg} -F ${bfg}"

# Main loop
while true; do
    echo $(content)
    sleep .5
done | lemonbar ${options}
